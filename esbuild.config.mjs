import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import sveltePlugin from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";
import path from "path";
import { copyFile } from "fs/promises";
import { config } from "dotenv";

config();

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const dir = prod ? "./" : process.env.OUTDIR;

const parameters = {
    banner: {
        js: banner
    },
    entryPoints: ["src/main.ts", "src/styles.css"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "codemirror",
        "@codemirror/autocomplete",
        "@codemirror/closebrackets",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/comment",
        "@codemirror/fold",
        "@codemirror/gutter",
        "@codemirror/highlight",
        "@codemirror/history",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/matchbrackets",
        "@codemirror/panel",
        "@codemirror/rangeset",
        "@codemirror/rectangular-selection",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/stream-parser",
        "@codemirror/text",
        "@codemirror/tooltip",
        "@codemirror/view",
        "moment",
        "@javalent/components/svelte",
        ...builtins
    ],
    format: "cjs",
    target: "es2022",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    minify: prod ? true : false,
    treeShaking: true,
    outdir: dir,
    conditions: ["svelte"],
    plugins: [
        sveltePlugin({
            compilerOptions: { css: "injected" },
            preprocess: sveltePreprocess(),
            filterWarnings: (warning) => {
                if (warning.code.toLowerCase().startsWith("a11y-")) {
                    return false;
                }
                return true;
            }
        })
    ],
    logOverride: { "empty-import-meta": "silent" }
};
if (prod) {
    await esbuild.build(parameters).catch((x) => {
        if (x.errors) {
            console.error(x.errors);
        } else {
            console.error(x);
        }
        process.exit(1);
    });
    await esbuild.build({
        entryPoints: ["./src/types/api.ts"],
        outdir: "./dist"
    });
} else {
    let ctx = await esbuild.context(parameters);
    await copyFile("./manifest.json", path.resolve(dir, "manifest.json"));
    await ctx.watch();
}
